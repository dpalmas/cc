/* Generated By:JJTree&JavaCC: Do not edit this line. CompiladorDPPTokenManager.java */
import java.io.*;

/** Token Manager. */
public class CompiladorDPPTokenManager implements CompiladorDPPConstants
{
    static int countLexError = 0;
    int countParserError = 0;

    public int foundLexError()
    {
        return countLexError;
    }

    public int foundParserError()
    {
        return countParserError;
    }

    /** Debug output. */
    public static java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public static void setDebugStream(java.io.PrintStream ds)
    {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0)
    {
        switch (pos)
        {
            case 0:
                if ((active0 & 0x3fffff00L) != 0L)
                {
                    jjmatchedKind = 46;
                    return 37;
                }
                return -1;
            case 1:
                if ((active0 & 0x3ffff100L) != 0L)
                {
                    if (jjmatchedPos != 1)
                    {
                        jjmatchedKind = 46;
                        jjmatchedPos = 1;
                    }
                    return 37;
                }
                if ((active0 & 0xe00L) != 0L)
                    return 37;
                return -1;
            case 2:
                if ((active0 & 0x3fdffd00L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 2;
                    return 37;
                }
                if ((active0 & 0x200000L) != 0L)
                    return 37;
                return -1;
            case 3:
                if ((active0 & 0x3fcdad00L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 3;
                    return 37;
                }
                if ((active0 & 0x125000L) != 0L)
                    return 37;
                return -1;
            case 4:
                if ((active0 & 0x3f4da100L) != 0L)
                {
                    if (jjmatchedPos != 4)
                    {
                        jjmatchedKind = 46;
                        jjmatchedPos = 4;
                    }
                    return 37;
                }
                if ((active0 & 0x800c00L) != 0L)
                    return 37;
                return -1;
            case 5:
                if ((active0 & 0x1f4ca900L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 5;
                    return 37;
                }
                if ((active0 & 0x20010000L) != 0L)
                    return 37;
                return -1;
            case 6:
                if ((active0 & 0x2442100L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 6;
                    return 37;
                }
                if ((active0 & 0x1d088800L) != 0L)
                    return 37;
                return -1;
            case 7:
                if ((active0 & 0x402000L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 7;
                    return 37;
                }
                if ((active0 & 0x2040100L) != 0L)
                    return 37;
                return -1;
            case 8:
                if ((active0 & 0x402000L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 8;
                    return 37;
                }
                return -1;
            case 9:
                if ((active0 & 0x2000L) != 0L)
                {
                    jjmatchedKind = 46;
                    jjmatchedPos = 9;
                    return 37;
                }
                if ((active0 & 0x400000L) != 0L)
                    return 37;
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0)
    {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    static private int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private int jjMoveStringLiteralDfa0_0()
    {
        switch (curChar)
        {
            case 40:
                return jjStopAtPos(0, 31);
            case 41:
                return jjStopAtPos(0, 32);
            case 44:
                return jjStopAtPos(0, 36);
            case 58:
                return jjMoveStringLiteralDfa1_0(0x40000000L);
            case 59:
                return jjStopAtPos(0, 35);
            case 80:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x2000L);
            case 98:
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x4000000L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0xc0000L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x20820000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x11000000L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x100000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x11000L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x8000000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0xe00L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x8000L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x600000L);
            case 123:
                return jjStopAtPos(0, 33);
            case 125:
                return jjStopAtPos(0, 34);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    static private int jjMoveStringLiteralDfa1_0(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar)
        {
            case 61:
                if ((active0 & 0x40000000L) != 0L)
                    return jjStopAtPos(1, 30);
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0xa25000L);
            case 101:
                if ((active0 & 0x200L) != 0L)
                {
                    jjmatchedKind = 9;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xc508c00L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x1040000L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x10100L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar)
        {
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x40a0000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000c00L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000100L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
            case 113:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
            case 114:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(2, 21, 37);
                return jjMoveStringLiteralDfa3_0(active0, 0x409000L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x9002000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar)
        {
            case 97:
                if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(3, 12, 37);
                else if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(3, 17, 37);
                else if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(3, 20, 37);
                return jjMoveStringLiteralDfa4_0(active0, 0xc00L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
            case 100:
                return jjMoveStringLiteralDfa4_0(active0, 0x410000L);
            case 101:
                return jjMoveStringLiteralDfa4_0(active0, 0x1002000L);
            case 103:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
            case 109:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
            case 111:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(3, 14, 37);
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x10080000L);
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar)
        {
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x20440000L);
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x2090000L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x11008000L);
            case 109:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
            case 111:
                if ((active0 & 0x400L) != 0L)
                {
                    jjmatchedKind = 10;
                    jjmatchedPos = 4;
                }
                else if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(4, 23, 37);
                return jjMoveStringLiteralDfa5_0(active0, 0x800L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x8002100L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar)
        {
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x6000100L);
            case 100:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
            case 102:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(5, 16, 37);
                break;
            case 109:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x804a000L);
            case 111:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 29, 37);
                break;
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
            case 115:
                return jjMoveStringLiteralDfa6_0(active0, 0x800L);
            case 118:
                return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar)
        {
            case 97:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(6, 15, 37);
                else if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(6, 19, 37);
                else if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 27, 37);
                return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
            case 101:
                if ((active0 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(6, 11, 37);
                else if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 28, 37);
                return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
            case 108:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 26, 37);
                break;
            case 109:
                return jjMoveStringLiteralDfa7_0(active0, 0x100L);
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
            case 111:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 24, 37);
                break;
            case 116:
                return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar)
        {
            case 97:
                if ((active0 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(7, 8, 37);
                break;
            case 105:
                return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
            case 111:
                if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(7, 18, 37);
                else if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 25, 37);
                break;
            case 116:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar)
        {
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
            case 114:
                return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(7, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar)
        {
            case 111:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(9, 22, 37);
                break;
            case 118:
                return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0);
    }

    static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(8, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(9, active0);
            return 10;
        }
        switch (curChar)
        {
            case 97:
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(10, 13, 37);
                break;
            default:
                break;
        }
        return jjStartNfa_0(9, active0);
    }

    static private int jjStartNfaWithStates_0(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 =
    {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    static private int jjMoveNfa_0(int startState, int curPos)
    {
        int startsAt = 0;
        jjnewStateCnt = 37;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;)
        {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64)
            {
                long l = 1L << curChar;
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 0:
                            if ((0x800000f8ffffc9ffL & l) != 0L)
                            {
                                if (kind > 49)
                                    kind = 49;
                                jjCheckNAdd(20);
                            }
                            else if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAddStates(0, 2);
                            }
                            else if ((0xac0000000000L & l) != 0L)
                            {
                                if (kind > 37)
                                    kind = 37;
                            }
                            else if ((0x5000000200000000L & l) != 0L)
                            {
                                if (kind > 38)
                                    kind = 38;
                            }
                            else if (curChar == 61)
                                jjCheckNAdd(2);
                            if ((0x3ff244a00000000L & l) != 0L)
                            {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(17);
                            }
                            else if (curChar == 47)
                                jjAddStates(3, 4);
                            else if (curChar == 43)
                                jjstateSet[jjnewStateCnt++] = 19;
                            else if (curChar == 62)
                                jjCheckNAdd(2);
                            else if (curChar == 60)
                                jjCheckNAdd(2);
                            break;
                        case 37:
                        case 7:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAddTwoStates(7, 8);
                            break;
                        case 1:
                            if ((0x5000000200000000L & l) != 0L && kind > 38)
                                kind = 38;
                            break;
                        case 2:
                            if (curChar == 61 && kind > 38)
                                kind = 38;
                            break;
                        case 3:
                            if (curChar == 61)
                                jjCheckNAdd(2);
                            break;
                        case 4:
                            if (curChar == 60)
                                jjCheckNAdd(2);
                            break;
                        case 5:
                            if (curChar == 62)
                                jjCheckNAdd(2);
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 10:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 11:
                            if (curChar == 46)
                                jjCheckNAdd(12);
                            break;
                        case 12:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAddTwoStates(12, 13);
                            break;
                        case 14:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(15);
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(15);
                            break;
                        case 16:
                            if ((0x3ff244a00000000L & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(17);
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(17);
                            break;
                        case 18:
                            if (curChar == 43)
                                jjstateSet[jjnewStateCnt++] = 19;
                            break;
                        case 19:
                            if (curChar != 61)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(17);
                            break;
                        case 20:
                            if ((0x800000f8ffffc9ffL & l) == 0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                            jjCheckNAdd(20);
                            break;
                        case 21:
                            if (curChar == 47)
                                jjAddStates(3, 4);
                            break;
                        case 22:
                            if (curChar != 47)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(23, 24);
                            break;
                        case 23:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(23, 24);
                            break;
                        case 25:
                            if ((0x8400002400L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(23, 24);
                            break;
                        case 26:
                            if (curChar != 10)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(23, 24);
                            break;
                        case 27:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 26;
                            break;
                        case 28:
                            if (curChar == 42)
                                jjCheckNAddStates(5, 8);
                            break;
                        case 29:
                            if ((0x2400L & l) != 0L)
                                jjCheckNAddStates(5, 8);
                            break;
                        case 30:
                            if ((0xffffffffffffdbffL & l) != 0L)
                                jjCheckNAddStates(5, 8);
                            break;
                        case 32:
                            if ((0x8400002400L & l) != 0L)
                                jjCheckNAddStates(5, 8);
                            break;
                        case 33:
                            if (curChar == 47 && kind > 6)
                                kind = 6;
                            break;
                        case 34:
                            if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 33;
                            break;
                        case 35:
                            if (curChar == 10)
                                jjCheckNAddStates(5, 8);
                            break;
                        case 36:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 35;
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 0:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                            {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAddTwoStates(7, 8);
                            }
                            else if ((0xd000000178000001L & l) != 0L)
                            {
                                if (kind > 49)
                                    kind = 49;
                                jjCheckNAdd(20);
                            }
                            if (curChar == 64)
                            {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(17);
                            }
                            break;
                        case 37:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                            {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAddTwoStates(7, 8);
                            }
                            else if (curChar == 95)
                                jjCheckNAdd(9);
                            break;
                        case 6:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAddTwoStates(7, 8);
                            break;
                        case 7:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAddTwoStates(7, 8);
                            break;
                        case 8:
                            if (curChar == 95)
                                jjCheckNAdd(9);
                            break;
                        case 9:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 13:
                            if (curChar == 69)
                                jjAddStates(9, 10);
                            break;
                        case 16:
                            if (curChar != 64)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(17);
                            break;
                        case 17:
                            if ((0x7fffffe87ffffffL & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(17);
                            break;
                        case 20:
                            if ((0xd000000178000001L & l) == 0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                            jjCheckNAdd(20);
                            break;
                        case 23:
                            if ((0xffffffffefffffffL & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(23, 24);
                            break;
                        case 24:
                            if (curChar == 92)
                                jjAddStates(11, 12);
                            break;
                        case 25:
                            if ((0x14404410000000L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAddTwoStates(23, 24);
                            break;
                        case 30:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(5, 8);
                            break;
                        case 31:
                            if (curChar == 92)
                                jjAddStates(13, 14);
                            break;
                        case 32:
                            if ((0x14404410000000L & l) != 0L)
                                jjCheckNAddStates(5, 8);
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 0:
                        case 20:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                            jjCheckNAdd(20);
                            break;
                        case 23:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjAddStates(15, 16);
                            break;
                        case 30:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(5, 8);
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            }
            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
                return curPos;
            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates =
    {
            10, 11, 13, 22, 28, 29, 30, 31, 34, 14, 15, 25, 27, 32, 36, 23,
            24,
    };

    /** Token literal values. */
    public static final String[] jjstrLiteralImages =
    {
            "", null, null, null, null, null, null, null,
            "\120\162\157\147\162\141\155\141", "\163\145", "\163\145\156\141\157", "\163\145\156\141\157\163\145",
            "\160\141\162\141", "\141\154\164\145\162\156\141\164\151\166\141", "\143\141\163\157",
            "\164\145\162\155\151\156\141", "\160\162\145\144\145\146", "\146\141\143\141",
            "\145\156\161\165\141\156\164\157", "\145\163\143\162\145\166\141", "\154\145\151\141", "\166\141\162",
            "\166\145\162\144\141\144\145\151\162\157", "\146\141\154\163\157", "\151\156\164\145\151\162\157",
            "\142\157\157\154\145\141\156\157", "\144\145\143\151\155\141\154", "\162\145\164\157\162\156\141",
            "\151\155\160\162\151\155\145", "\146\165\156\143\141\157", "\72\75", "\50", "\51", "\173", "\175", "\73",
            "\54", null, null, null, null, null, null, null, null, null, null, null, null, null, };

    /** Lexer state names. */
    public static final String[] lexStateNames =
    {
            "DEFAULT",
    };
    static final long[] jjtoToken =
    {
            0xc07fffffff01L,
    };
    static final long[] jjtoSkip =
    {
            0x300000000007eL,
    };
    static final long[] jjtoSpecial =
    {
            0x3000000000000L,
    };
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[37];
    static private final int[] jjstateSet = new int[74];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected char curChar;

    /** Constructor. */
    public CompiladorDPPTokenManager(SimpleCharStream stream)
    {
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    /** Constructor. */
    public CompiladorDPPTokenManager(SimpleCharStream stream, int lexState)
    {
        this(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream)
    {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;
        for (i = 37; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream, int lexState)
    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    static public void SwitchTo(int lexState)
    {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken()
    {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /** Get the next Token. */
    public static Token getNextToken()
    {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;)
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e)
            {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            try
            {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e1)
            {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff)
            {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    TokenLexicalActions(matchedToken);
                    return matchedToken;
                }
                else
                {
                    if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                    {
                        matchedToken = jjFillToken();
                        if (specialToken == null)
                            specialToken = matchedToken;
                        else
                        {
                            matchedToken.specialToken = specialToken;
                            specialToken = (specialToken.next = matchedToken);
                        }
                        SkipLexicalActions(matchedToken);
                    }
                    else
                        SkipLexicalActions(null);
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try
            {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1)
            {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r')
                {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
            }
            if (!EOFSeen)
            {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static void SkipLexicalActions(Token matchedToken)
    {
        switch (jjmatchedKind)
        {
            case 48:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Identificador Invalido: " + image);
                countLexError++;
                System.out.println(
                        "\u005cn\u005cnErro lexico -------->  Linha " +
                                input_stream.getEndLine() +
                                " Coluna " +
                                input_stream.getEndColumn() +
                                " " +
                                image +
                                "\u005cn");
                break;
            case 49:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Linha " + input_stream.getEndLine() + " Coluna " + input_stream.getEndColumn() + " Caractere invalido encontrado: " + image + "TOTAL ERRO " + countLexError);
                countLexError++;
                System.out.println("\u005cn\u005cnErro lexico -------->  Linha " + input_stream.getEndLine() + " Coluna " + input_stream.getEndColumn() + " " + image + "\u005cn");
                break;
            default:
                break;
        }
    }

    static void TokenLexicalActions(Token matchedToken)
    {
        switch (jjmatchedKind)
        {
            case 8:
                image.append(jjstrLiteralImages[8]);
                lengthOfMatch = jjstrLiteralImages[8].length();
                System.out.println("PROGRAMA -> " + image);
                break;
            case 9:
                image.append(jjstrLiteralImages[9]);
                lengthOfMatch = jjstrLiteralImages[9].length();
                System.out.println("IF -> " + image);
                break;
            case 10:
                image.append(jjstrLiteralImages[10]);
                lengthOfMatch = jjstrLiteralImages[10].length();
                System.out.println("ELSE -> " + image);
                break;
            case 11:
                image.append(jjstrLiteralImages[11]);
                lengthOfMatch = jjstrLiteralImages[11].length();
                System.out.println("ELSE IF -> " + image);
                break;
            case 12:
                image.append(jjstrLiteralImages[12]);
                lengthOfMatch = jjstrLiteralImages[12].length();
                System.out.println("FOR -> " + image);
                break;
            case 13:
                image.append(jjstrLiteralImages[13]);
                lengthOfMatch = jjstrLiteralImages[13].length();
                System.out.println("SWITCH -> " + image);
                break;
            case 14:
                image.append(jjstrLiteralImages[14]);
                lengthOfMatch = jjstrLiteralImages[14].length();
                System.out.println("CASE -> " + image);
                break;
            case 15:
                image.append(jjstrLiteralImages[15]);
                lengthOfMatch = jjstrLiteralImages[15].length();
                System.out.println("BREAK -> " + image);
                break;
            case 16:
                image.append(jjstrLiteralImages[16]);
                lengthOfMatch = jjstrLiteralImages[16].length();
                System.out.println("DEFAULT -> " + image);
                break;
            case 17:
                image.append(jjstrLiteralImages[17]);
                lengthOfMatch = jjstrLiteralImages[17].length();
                System.out.println("DO -> " + image);
                break;
            case 18:
                image.append(jjstrLiteralImages[18]);
                lengthOfMatch = jjstrLiteralImages[18].length();
                System.out.println("WHILE -> " + image);
                break;
            case 19:
                image.append(jjstrLiteralImages[19]);
                lengthOfMatch = jjstrLiteralImages[19].length();
                System.out.println("WRITE -> " + image);
                break;
            case 20:
                image.append(jjstrLiteralImages[20]);
                lengthOfMatch = jjstrLiteralImages[20].length();
                System.out.println("READ -> " + image);
                break;
            case 21:
                image.append(jjstrLiteralImages[21]);
                lengthOfMatch = jjstrLiteralImages[21].length();
                System.out.println("VARIAVEL -> " + image);
                break;
            case 22:
                image.append(jjstrLiteralImages[22]);
                lengthOfMatch = jjstrLiteralImages[22].length();
                System.out.println("VERDADEIRO -> " + image);
                break;
            case 23:
                image.append(jjstrLiteralImages[23]);
                lengthOfMatch = jjstrLiteralImages[23].length();
                System.out.println("FALSO -> " + image);
                break;
            case 24:
                image.append(jjstrLiteralImages[24]);
                lengthOfMatch = jjstrLiteralImages[24].length();
                System.out.println("INTEIRO -> " + image);
                break;
            case 25:
                image.append(jjstrLiteralImages[25]);
                lengthOfMatch = jjstrLiteralImages[25].length();
                System.out.println("BOOLEANO -> " + image);
                break;
            case 26:
                image.append(jjstrLiteralImages[26]);
                lengthOfMatch = jjstrLiteralImages[26].length();
                System.out.println("DECIMAL -> " + image);
                break;
            case 27:
                image.append(jjstrLiteralImages[27]);
                lengthOfMatch = jjstrLiteralImages[27].length();
                System.out.println("RETORNA -> " + image);
                break;
            case 28:
                image.append(jjstrLiteralImages[28]);
                lengthOfMatch = jjstrLiteralImages[28].length();
                System.out.println("IMPRIME -> " + image);
                break;
            case 29:
                image.append(jjstrLiteralImages[29]);
                lengthOfMatch = jjstrLiteralImages[29].length();
                System.out.println("FUNCAO -> " + image);
                break;
            case 30:
                image.append(jjstrLiteralImages[30]);
                lengthOfMatch = jjstrLiteralImages[30].length();
                System.out.println("ATRIBUI\u00c7\u00c3O -> " + image + "\u005cr\u005cn");
                break;
            case 31:
                image.append(jjstrLiteralImages[31]);
                lengthOfMatch = jjstrLiteralImages[31].length();
                System.out.println("ABRE PARENTESE -> " + image);
                break;
            case 32:
                image.append(jjstrLiteralImages[32]);
                lengthOfMatch = jjstrLiteralImages[32].length();
                System.out.println("FECHA PARENTESE -> " + image);
                break;
            case 33:
                image.append(jjstrLiteralImages[33]);
                lengthOfMatch = jjstrLiteralImages[33].length();
                System.out.println("ABRE CHAVE -> " + image);
                break;
            case 34:
                image.append(jjstrLiteralImages[34]);
                lengthOfMatch = jjstrLiteralImages[34].length();
                System.out.println("FECHA CHAVE -> " + image);
                break;
            case 35:
                image.append(jjstrLiteralImages[35]);
                lengthOfMatch = jjstrLiteralImages[35].length();
                System.out.println("PONTO E V\u00cdRGULA -> " + image);
                break;
            case 36:
                image.append(jjstrLiteralImages[36]);
                lengthOfMatch = jjstrLiteralImages[36].length();
                System.out.println("V\u00cdRGULA -> " + image);
                break;
            default:
                break;
        }
    }

    static private void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private void jjAddStates(int start, int end)
    {
        do
        {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        }
        while (start++ != end);
    }

    static private void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private void jjCheckNAddStates(int start, int end)
    {
        do
        {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++ != end);
    }
}
