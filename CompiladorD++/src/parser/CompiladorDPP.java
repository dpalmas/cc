/* Generated By:JJTree&JavaCC: Do not edit this line. CompiladorDPP.java */
package parser;
import recovery.*;

public class CompiladorDPP/*@bgen(jjtree)*/implements CompiladorDPPTreeConstants, CompiladorDPPConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorDPPState jjtree = new JJTCompiladorDPPState();public static void main(String args []) throws ParseException
  {
    CompiladorDPP cdpp = new CompiladorDPP(System.in);
    SimpleNode sn = cdpp.Programa();
    sn.dump(" ");
    /*try
    {
      CompiladorDPP cdpp = new CompiladorDPP(System.in);
      cdpp.Programa();
    }
    catch (ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("CompiladorDPP: Erros encontrados na análise.");
    }*/
  }

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\u005c"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {
    }
    return s;
  }

  static Token lastError = null;

  static boolean eof; // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
  ParseException e,
  String met) throws ParseEOFException,
  ParseException
  {
    Token tok;
    System.out.println();
    System.out.println("*** " + met + " ***");
    System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
    if (g == null) throw e; // se o conjunto é null, propaga a exceção
    tok = getToken(1); // pega token corrente
    while (!eof)
    { // se não chegou ao fim do arquivo
      if (g.contains(tok.kind))
      { //achou um token no conjunto
        System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
        im(tok.kind));
        break;
      }
      System.out.println("     Ignorando o token: " + im(tok.kind));
      getNextToken(); // pega próximo token       
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF))  // fim da entrada?   
      eof = true;
    }
    if (tok != lastError)
    {
      System.out.println(e.getMessage());
      lastError = tok;
    }
    if (eof)
    throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public SimpleNode Programa() throws ParseException {
 /*@bgen(jjtree) Programa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PROG);
      jj_consume_token(ID);
      jj_consume_token(ACHAVE);
      Bloco();
      jj_consume_token(FCHAVE);
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Bloco() throws ParseException {
 /*@bgen(jjtree) Bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO:
        DeclaracaoGlobal();
        break;
      default:
        jj_la1[0] = jj_gen;
        Principal();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DeclaracaoGlobal() throws ParseException {
 /*@bgen(jjtree) DeclaracaoGlobal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOGLOBAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPO);
      VariaveisGlobais();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariaveisGlobais() throws ParseException {
 /*@bgen(jjtree) VariaveisGlobais */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEISGLOBAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      jj_consume_token(PEV);
      W();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void W() throws ParseException {
 /*@bgen(jjtree) W */
  SimpleNode jjtn000 = new SimpleNode(JJTW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO:
        DeclaracaoGlobal();
        break;
      default:
        jj_la1[1] = jj_gen;
        Principal();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Principal() throws ParseException {
 /*@bgen(jjtree) Principal */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINCIPAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Sentencas();
    } catch (Throwable jjte000) {
                      if (jjtc000) {
                        jjtree.clearNodeScope(jjtn000);
                        jjtc000 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte000 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte000;}
                      }
                      if (jjte000 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte000;}
                      }
                      {if (true) throw (Error)jjte000;}
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
  }

  static final public void DeclaracaoLocal() throws ParseException {
 /*@bgen(jjtree) DeclaracaoLocal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOLOCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPO);
      VariaveisLocais();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariaveisLocais() throws ParseException {
 /*@bgen(jjtree) VariaveisLocais */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEISLOCAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      jj_consume_token(PEV);
      VS();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VS() throws ParseException {
 /*@bgen(jjtree) VS */
  SimpleNode jjtn000 = new SimpleNode(JJTVS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO:
        DeclaracaoLocal();
        break;
      default:
        jj_la1[2] = jj_gen;
        Sentencas();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Sentencas() throws ParseException {
 /*@bgen(jjtree) Sentencas */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case TIPO:
        case ID:
        case IF:
        case FOR:
        case DO:
        case WRITE:
        case READ:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPO:
          DeclaracaoLocal();
          break;
        case IF:
          SentencaIf();
          break;
        case FOR:
          SentencaFor();
          break;
        case DO:
          SentencaDo();
          break;
        case ID:
          SentencaAtribuicao();
          break;
        case WRITE:
          SentencaWrite();
          break;
        case READ:
          SentencaRead();
          break;
        case 0:
          jj_consume_token(0);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void A() throws ParseException {
 /*@bgen(jjtree) A */
  SimpleNode jjtn000 = new SimpleNode(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Comparacoes();
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void Comparacoes() throws ParseException {
 /*@bgen(jjtree) Comparacoes */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACOES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Valor();
      Operadores();
      Valor();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Valor() throws ParseException {
 /*@bgen(jjtree) Valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expressao() throws ParseException {
 /*@bgen(jjtree) Expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      jj_consume_token(SOM);
      jj_consume_token(ID);
      jj_consume_token(PEV);
    } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  static final public void Operadores() throws ParseException {
 /*@bgen(jjtree) Operadores */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IG:
        jj_consume_token(IG);
        break;
      case ME:
        jj_consume_token(ME);
        break;
      case MENI:
        jj_consume_token(MENI);
        break;
      case MA:
        jj_consume_token(MA);
        break;
      case MAII:
        jj_consume_token(MAII);
        break;
      case DIF:
        jj_consume_token(DIF);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void OpAritmetico() throws ParseException {
 /*@bgen(jjtree) OpAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOM:
        jj_consume_token(SOM);
        break;
      case SUB:
        jj_consume_token(SUB);
        break;
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void SentencaIf() throws ParseException {
 /*@bgen(jjtree) SentencaIf */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(APAREN);
      A();
      jj_consume_token(FPAREN);
      jj_consume_token(ACHAVE);
      Sentencas();
      jj_consume_token(FCHAVE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentencaFor() throws ParseException {
 /*@bgen(jjtree) SentencaFor */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(APAREN);
      SentencaAtribuicao();
      jj_consume_token(PEV);
      Comparacoes();
      SentencaAtribuicao();
      jj_consume_token(FPAREN);
      jj_consume_token(ACHAVE);
      Sentencas();
      jj_consume_token(FCHAVE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentencaDo() throws ParseException {
 /*@bgen(jjtree) SentencaDo */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      jj_consume_token(ACHAVE);
      Sentencas();
      jj_consume_token(FCHAVE);
      jj_consume_token(WHILE);
      jj_consume_token(APAREN);
      Comparacoes();
      jj_consume_token(FPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentencaAtribuicao() throws ParseException {
 /*@bgen(jjtree) SentencaAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      jj_consume_token(ATRIB);
      Expressao();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentencaWrite() throws ParseException {
 /*@bgen(jjtree) SentencaWrite */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
      jj_consume_token(APAREN);
      Expressao();
      jj_consume_token(FPAREN);
      jj_consume_token(PEV);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SentencaRead() throws ParseException {
 /*@bgen(jjtree) SentencaRead */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCAREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(READ);
      jj_consume_token(APAREN);
      jj_consume_token(FPAREN);
      jj_consume_token(PEV);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorDPPTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x20,0x20,0x1a1200a1,0x1a1200a1,0xc0,0x0,0x3c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0xfc0,0x0,};
   }

  /** Constructor with InputStream. */
  public CompiladorDPP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorDPP(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorDPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorDPP(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorDPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorDPP(CompiladorDPPTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorDPPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
