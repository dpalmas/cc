/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CompiladorDPP.jj */
/*@egen*//**
 * LINGUAGEM D++
 */

options
{
  static = true;
}

PARSER_BEGIN(CompiladorDPP)
import java.io.*;

public class CompiladorDPP/*@bgen(jjtree)*/implements CompiladorDPPTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCompiladorDPPState jjtree = new JJTCompiladorDPPState();

/*@egen*/

  public static void main(String args []) throws ParseException, IOException
  {
    try
    {
      CompiladorDPP cdpp = new CompiladorDPP(new FileInputStream(args [0]));
      SimpleNode sn = cdpp.CompiladorDPP();
      sn.dump("");
    }
    catch (Exception e)
    {
      System.out.println("Analise Sintaxica incorreta");
      System.out.println("Erro de Token.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    catch (Error e)
    {
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(CompiladorDPP)

TOKEN_MGR_DECLS:
{
  static int countLexError = 0;
  int countParserError = 0;

  public int foundLexError()
  {
    return countLexError;
  }

  public int foundParserError()
  {
    return countParserError;
  }
}


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <COMENTARIO: "//" (<COM>)* >
| <COMENTARIOS: "/*" ("\n" | "\r" | <COM>)* "*/" >
| <#COM: ( ~["\"","\\","\n","\r","\""] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n") ) | "\"" )*>
}

TOKEN: /* PALAVRAS RESERVADAS */
{
	  <PROG: "Programa" > {System.out.println("PROGRAMA -> "+image);}
	| <IF: "se" >{System.out.println("IF -> "+image);}
	| <ELSE:"senao" >{System.out.println("ELSE -> "+image);}
	| <ELSEIF:"senaose" >{System.out.println("ELSE IF -> "+image);}
	| <FOR:"para" >{System.out.println("FOR -> "+image);}
	| <SWITCH:"alternativa" >{System.out.println("SWITCH -> "+image);}
	| <CASE:"caso" >{System.out.println("CASE -> "+image);}
	| <BREAK:"termina" >{System.out.println("BREAK -> "+image);}
	| <DEFAUL:"predef" >{System.out.println("DEFAULT -> "+image);}
	| <DO:"faca" >{System.out.println("DO -> "+image);}
	| <WHILE:"enquanto" >{System.out.println("WHILE -> "+image);}
	| <WRITE:"escreva" >{System.out.println("WRITE -> "+image);}
	| <READ:"leia" >{System.out.println("READ -> "+image);}
	| <VAR:"var" >{System.out.println("VARIAVEL -> "+image);}
	| <TRUE:"verdadeiro" >{System.out.println("VERDADEIRO -> "+image);}
	| <FALSE:"falso" >{System.out.println("FALSO -> "+image);}
	| <INT:"inteiro" >{System.out.println("INTEIRO -> "+image);}
	| <BOOL:"booleano" >{System.out.println("BOOLEANO -> "+image);}
	| <FLOAT:"decimal" >{System.out.println("DECIMAL -> "+image);}
	| <RETURN:"retorna" >{System.out.println("RETORNA -> "+image);}
	| <PRINT:"imprime" >{System.out.println("IMPRIME -> "+image);}
	| <FUNCAO:"funcao" >{System.out.println("FUNCAO -> "+image);}
	| <ATRIB:":="> {System.out.println("ATRIBUI\u00c7\u00c3O -> "+image+"\r\n");}
}

TOKEN:
{
      <APAREN: "(" >{System.out.println("ABRE PARENTESE -> "+image);}
	| <FPAREN: ")" >{System.out.println("FECHA PARENTESE -> "+image);}
	| <ACHAVE: "{" >{System.out.println("ABRE CHAVE -> "+image);}
	| <FCHAVE: "}" >{System.out.println("FECHA CHAVE -> "+image);}
	| <PEV: ";" >{System.out.println("PONTO E V\u00cdRGULA -> "+image);}
	| <VIR: "," >{System.out.println("V\u00cdRGULA -> "+image);}
}

TOKEN :
{
 <			 OP: ("+" | "-" | "*" | "/" )					>
|<		    OPL: ( "<" | ">" | "=="| "<="| ">=" |"!")		>
|<		 #LETRA: ["a"-"z","A"-"Z"]							> 
|<	    #DIGITO: ["0"-"9"]									>
|<	   #DIGITOS: <DIGITO> (<DIGITO>)*						>
|<		    #LD: <LETRA> | <DIGITO>							>
|<		  #FSUB: ("_"(<LD>)+)								>
|<		   #FOP: ("."<DIGITOS>)?							>
|<		 #EXPOP: ("E"("+" | "-")?<DIGITOS>)?				>
|<IDENTIFICADOR: <LETRA>(<LD>)*(<FSUB>)*					>
|< TOKEN_NUMLIT: <DIGITOS><FOP><EXPOP>						>
}

SPECIAL_TOKEN :
{
  < ID_INVALIDO :
    (
      "@"
    | "!"
    | "#"
    | "*"
    | "-"
    | "+" "="
    | "&"
    | < DIGITO >
    )
    (
      < LETRA >
    | < DIGITO >
    | "_"
    | "@"
    )* >
  {
    System.out.println("Identificador Invalido: " + image);
    countLexError++;
    System.out.println(
    "\n\nErro lexico -------->  Linha " + 
    input_stream.getEndLine() + 
    " Coluna " + 
    input_stream.getEndColumn() + 
    " " + 
    image + 
    "\n"
    );
  }
| 
  < INVALIDO_LEXICO : 
    (~[ "a"-"z", 
    "A"-"Z", 
    "0"-"9", "\"", "(", ")", "{", "}", ";", ",", ".", "=", ":", ">", "<", "!", "+", "-", "*", "/", " ", "_", ";", "\t", "\n", "\r", "\f" 
    ])+ >
  {
    System.out.println("Linha " + input_stream.getEndLine() + " Coluna " + input_stream.getEndColumn() + " Caractere invalido encontrado: " + image + "TOTAL ERRO " + countLexError);
    countLexError++;
    System.out.println("\n\nErro lexico -------->  Linha " + input_stream.getEndLine() + " Coluna " + input_stream.getEndColumn() + " " + image + "\n");
  }
}

SimpleNode CompiladorDPP () :
{/*@bgen(jjtree) CompiladorDPP */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILADORDPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompiladorDPP */
  try {
/*@egen*/
  Programa()
  (
    Func()
  )*
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
	
void Programa ():
{/*@bgen(jjtree) Programa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Programa */
 try {
/*@egen*/
 <PROG> <ACHAVE> 
 
 VarDecl()
 SeqComandos()

 <FCHAVE>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/

}

void VarDecl ():
{/*@bgen(jjtree) VarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDecl */
        try {
/*@egen*/
	(<VAR> Tipo() <IDENTIFICADOR> Atribuicao())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Tipo ():
{/*@bgen(jjtree) Tipo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tipo */
        try {
/*@egen*/
	<INT> | <BOOL> | <FLOAT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Atribuicao():
{/*@bgen(jjtree) Atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Atribuicao */
         try {
/*@egen*/
	 Atribuir()
	 | <PEV>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/  
}

void Atribuir ():
{/*@bgen(jjtree) Atribuir */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Atribuir */
        try {
/*@egen*/
	<ATRIB> Exp() Loop()  | <APAREN> ( ListaExp() )? <FPAREN> <PEV> | Mdeclaracao()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Mdeclaracao():
{/*@bgen(jjtree) Mdeclaracao */
  SimpleNode jjtn000 = new SimpleNode(JJTMDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mdeclaracao */
 try {
/*@egen*/
 <VIR> <IDENTIFICADOR> Atribuicao()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Loop():
{/*@bgen(jjtree) Loop */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Loop */
         try {
/*@egen*/
	 Mdeclaracao() | <PEV>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}	

void Exp():
{/*@bgen(jjtree) Exp */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp */
        try {
/*@egen*/
	<APAREN> Exp() <OP> Exp() <FPAREN> | Fator()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Fator():
{/*@bgen(jjtree) Fator */
  SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fator */
        try {
/*@egen*/
	<IDENTIFICADOR> ( <APAREN> ( ListaExp() )? <FPAREN> )? | <TOKEN_NUMLIT> | <TRUE> | <FALSE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
 
void ListaExp():
{/*@bgen(jjtree) ListaExp */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListaExp */
        try {
/*@egen*/
	Exp() ListaExp2()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListaExp2():
{/*@bgen(jjtree) ListaExp2 */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListaExp2 */
        try {
/*@egen*/
	(<VIR> Exp() ListaExp2())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SeqComandos ():
{/*@bgen(jjtree) SeqComandos */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQCOMANDOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SeqComandos */
        try {
/*@egen*/
	(Comando())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Comando ():
{/*@bgen(jjtree) Comando */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Comando */
                try {
/*@egen*/
		<IDENTIFICADOR> Atribuir() 
		| <IF> <APAREN> Exp_logicas() <FPAREN><ACHAVE>SeqComandos()<FCHAVE> (<ELSE> <ACHAVE>SeqComandos()<FCHAVE>)? <PEV>
		| <WHILE> <APAREN> Exp_logicas() <FPAREN><ACHAVE>SeqComandos()<FCHAVE> <PEV>
		| <DO> <ACHAVE>SeqComandos()<FCHAVE> <WHILE> <APAREN> Exp_logicas() <FPAREN> <PEV>						
		| <RETURN> Exp() <PEV>
		| <PRINT> <APAREN> Exp() <FPAREN> <PEV>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}                                                       

void Exp_logicas():
{/*@bgen(jjtree) Exp_logicas */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP_LOGICAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp_logicas */
        try {
/*@egen*/
	<APAREN> Exp_logicas() <OPL> Exp_logicas() <FPAREN> | Fator_logico()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Fator_logico():
{/*@bgen(jjtree) Fator_logico */
  SimpleNode jjtn000 = new SimpleNode(JJTFATOR_LOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fator_logico */
        try {
/*@egen*/
	<IDENTIFICADOR> | <TOKEN_NUMLIT> | <TRUE> | <FALSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Func():
{/*@bgen(jjtree) Func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Func */
        try {
/*@egen*/
	<FUNCAO> Tipo() <IDENTIFICADOR> <APAREN> ( ListaArg() )? <FPAREN> <ACHAVE> VarDecl() SeqComandos() <FCHAVE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListaArg():
{/*@bgen(jjtree) ListaArg */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTAARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListaArg */
        try {
/*@egen*/
	Tipo() <IDENTIFICADOR> ListaArg2()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListaArg2():
{/*@bgen(jjtree) ListaArg2 */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTAARG2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListaArg2 */
        try {
/*@egen*/
	(<VIR> Tipo() <IDENTIFICADOR> ListaArg2())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}