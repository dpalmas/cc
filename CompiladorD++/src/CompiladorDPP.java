/* Generated By:JavaCC: Do not edit this line. CompiladorDPP.java */
public class CompiladorDPP implements CompiladorDPPConstants {
  public static void main(String args []) throws ParseException
  {
    try
    {
      CompiladorDPP cdpp = new CompiladorDPP(System.in);
      cdpp.Programa();
    }
    catch (ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("CompiladorDPP: Erros encontrados na an\u00e1lise.");
    }
  }

  static final public void Programa() throws ParseException {
    jj_consume_token(PROG);
    jj_consume_token(ID);
    jj_consume_token(ACHAVE);
    Bloco();
    jj_consume_token(FCHAVE);
    jj_consume_token(0);
  }

  static final public void Bloco() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO:
      DeclaracaoGlobal();
      break;
    default:
      jj_la1[0] = jj_gen;
      Principal();
    }
  }

  static final public void DeclaracaoGlobal() throws ParseException {
    jj_consume_token(TIPO);
    VariaveisGlobais();
  }

  static final public void VariaveisGlobais() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(PEV);
    W();
  }

  static final public void W() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO:
      DeclaracaoGlobal();
      break;
    default:
      jj_la1[1] = jj_gen;
      Principal();
    }
  }

  static final public void Principal() throws ParseException {
    Sentencas();
  }

  static final public void DeclaracaoLocal() throws ParseException {
    jj_consume_token(TIPO);
    VariaveisLocais();
  }

  static final public void VariaveisLocais() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(PEV);
    VS();
  }

  static final public void VS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO:
      DeclaracaoLocal();
      break;
    default:
      jj_la1[2] = jj_gen;
      Sentencas();
    }
  }

  static final public void Sentencas() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case TIPO:
      case ID:
      case IF:
      case FOR:
      case DO:
      case WRITE:
      case READ:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO:
        DeclaracaoLocal();
        break;
      case IF:
        SentencaIf();
        break;
      case FOR:
        SentencaFor();
        break;
      case DO:
        SentencaDo();
        break;
      case ID:
        SentencaAtribuicao();
        break;
      case WRITE:
        SentencaWrite();
        break;
      case READ:
        SentencaRead();
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void A() throws ParseException {
    Comparacoes();
  }

  static final public void Comparacoes() throws ParseException {
    Valor();
    Operadores();
    Valor();
  }

  static final public void Valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expressao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(SOM);
    jj_consume_token(ID);
    jj_consume_token(PEV);
  }

  static final public void Operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IG:
      jj_consume_token(IG);
      break;
    case ME:
      jj_consume_token(ME);
      break;
    case MENI:
      jj_consume_token(MENI);
      break;
    case MA:
      jj_consume_token(MA);
      break;
    case MAII:
      jj_consume_token(MAII);
      break;
    case DIF:
      jj_consume_token(DIF);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OpAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOM:
      jj_consume_token(SOM);
      break;
    case SUB:
      jj_consume_token(SUB);
      break;
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SentencaIf() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(APAREN);
    A();
    jj_consume_token(FPAREN);
    jj_consume_token(ACHAVE);
    Sentencas();
    jj_consume_token(FCHAVE);
  }

  static final public void SentencaFor() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(APAREN);
    SentencaAtribuicao();
    jj_consume_token(PEV);
    Comparacoes();
    SentencaAtribuicao();
    jj_consume_token(FPAREN);
    jj_consume_token(ACHAVE);
    Sentencas();
    jj_consume_token(FCHAVE);
  }

  static final public void SentencaDo() throws ParseException {
    jj_consume_token(DO);
    jj_consume_token(ACHAVE);
    Sentencas();
    jj_consume_token(FCHAVE);
    jj_consume_token(WHILE);
    jj_consume_token(APAREN);
    Comparacoes();
    jj_consume_token(FPAREN);
  }

  static final public void SentencaAtribuicao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ATRIB);
    Expressao();
  }

  static final public void SentencaWrite() throws ParseException {
    jj_consume_token(WRITE);
    jj_consume_token(APAREN);
    Expressao();
    jj_consume_token(FPAREN);
    jj_consume_token(PEV);
  }

  static final public void SentencaRead() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(APAREN);
    jj_consume_token(FPAREN);
    jj_consume_token(PEV);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorDPPTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x20,0x20,0x1a1200a1,0x1a1200a1,0xc0,0x0,0x3c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0xfc0,0x0,};
   }

  /** Constructor with InputStream. */
  public CompiladorDPP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorDPP(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorDPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorDPP(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorDPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorDPP(CompiladorDPPTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorDPPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
